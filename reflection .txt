Reflection 
According to the specification, I’m supposed to implement sensor, robot and inspector to the system for the solution 1. The BeltMover thread makes the belt to move, and the sensor only need to check the bicycle on the belt segment. Therefore, I think the BeltMover thread can handle the sensor to check the bicycle, there is no need to create a thread for sensor. Moreover, what robot needs to do is putting bicycle from the belt  into the inspector, and move it back to belt, and it seams like robot and inspector are collaborating to do one thing together. Thus, I decide to create a separate process for robot, and let this robot thread to control the inspecting process. 
For the fist solution, there is a problem that deadlock will happen. This is because the system needs check every tagged bicycle, all inspected  bicycles have to return to segment 3, and the inspector can only inspect one bicycle at a time. If there is one tagged bicycle is already in the inspector, and the sensor finds there is another tagged bicycle in segment 3, then the robot could not move the tagged bicycle to the inspector or move the inspected bicycle back to belt, it will cause robot and belt stuck then deadlock happens. And the length of inspecting time is longer, and the probability of deadlock happens is higher. 	
For the solution 2, I just introduce two objects to this system, which are a new short belt, and a new consumer for it. And there should be one more thread to control the movement of short belt and one thread for the corresponding consumer. And the belt mover for long belt controls the sensor, while there is no sensor on the short belt, so I decide to create a thread for the sensor, in this way, two belt mover will act in the same way. After creating a new thread for the sensor, everything is working fine. This strategy is better than the former one, deadlock won’t happen.